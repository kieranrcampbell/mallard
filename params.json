{"name":"Mallard","tagline":"Data Acquisition for the CRIS experiment at ISOLDE","body":"### Mallard for CRIS at [ISOLDE](http://isolde.web.cern.ch/)\r\nMallard (Multi-Analog LossLess Acquisition of Resonance Data) is data acquisition software for the Collinear Resonant Ionization Spectroscopy experiment at CERN.\r\n\r\n### Contents\r\n- [Installation](#installation)\r\n- [Operation](#operation)\r\n- [Development](#development)\r\n- [Authors](#authors)\r\n\r\n### Installation\r\nMallard is written in python and so requires a python distribution such as [Anaconda](https://store.continuum.io/).\r\n##### Dependences\r\nMallard has the following dependencies:\r\n* [wxPython](http://www.wxpython.org/)\r\n* [SciPy](http://www.scipy.org/) (on windows we use [Anaconda](https://store.continuum.io/) )\r\n* [PyDAQmx](http://pythonhosted.org/PyDAQmx/)\r\n\r\nMallard also uses [NI-DAQmx](http://www.ni.com/dataacquisition/nidaqmx.htm) from National Instruments to interface the **USB-6211** card.\r\n\r\n##### Setup\r\n### Operation\r\nMallard sets the voltage of the laser, scanning across a given range multiple times, while counting events from the MCP and reading voltages from an analog input corresponding to the current laser intensity. It graphs the counts and analog input voltage against a given output voltage, averages over the scans and saves to file.\r\n\r\n##### Key Concepts\r\n- **Voltage minimum**: The voltage from which the laser starts scanning\r\n- **Voltage maximum**: The voltage to which the laser will scan\r\n- **Intervals per scan**: The number of intervals to scan in the voltage range\r\n- **Scans**: The number of full scans to do (from minimum to maximum across the range)\r\n- **Clock cycles per interval**: The number of onboard clock cycles to wait per scan (known as the 'rate' in NI terminology, 100 is a good number)\r\n- **Analog input**: Analog input channel (default /Dev1/ai2)\r\n- **Counter input**: Input channel for counting events. This is a 'virtual' channel, which requires looking at the NI handbook, but Dev1/ctr1 corresponds to Dev1/PFI1 on the 6211\r\n- **Analog output**: Analog output channel (default /Dev1/ao0)\r\n- **Clock input**: Input channel for the pseudo-trigger clock\r\n\r\n##### File Output\r\nWhen mallard runs it creates two datasets: every count measurement at every interval across every scan, and likewise for the analog input readings. These are then averaged over the scans to give a third 'integrated' dataset. As such, mallard outputs 3 data files. If the capture name is 'mycapture' then these files are:\r\n- **mycapture.integrated.csv**: contains the integrated (final) dataset across all scans\r\n- **mycapture.raw.counts.csv**: contains the raw count data for all intervals and scans\r\n- **mycapture.raw.ai.csv**: contains the raw analog input information for all intervals and scans\r\n\r\nEach of these files is in comma separated value format and contains a header, denoted by '#' at the beginning of each line, containing the settings listed in key concepts above. As such, any file can be used to recover capture settings for a new capture.\r\n\r\nMallard doesn't yet have any in built analysis, but with the data in this format it should be easy enough. The data can be opened directly in excel, or using numpy in python as follows:\r\n```python\r\nimport numpy as np\r\ndata = np.loadtxt('mycapture.integrated.csv')\r\nvoltage_intervals = data.T[0] # need to transpose matrix\r\ncounts = data.T[1]\r\nai_readings = data.T[2]\r\n```\r\n\r\nand `voltage`, `counts` and `ai_readings` can be analysed using any of the standard tools in SciPy.\r\n\r\n### Development\r\nThe mallard package uses several sub-packages:\r\n* `mallard.core` - base functionality for the package including data and file handling, as well as managing a general capture session including settings\r\n* `mallard.daq` - interfaces to the USB-6211 card. If the card needs changed in future then only this module needs rewritten\r\n* `mallard.gui` - provides the user interface using wxPython\r\n* `mallard.test` - all the small scripts created along the way, in case they come in handy at a later point\r\n\r\n### Authors\r\nOriginally written by Kieran Campbell (@kieranrcampbell) as part of the CERN summer student program.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}