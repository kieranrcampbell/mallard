{"name":"Mallard","tagline":"Data Acquisition for the CRIS experiment at ISOLDE","body":"### Mallard for CRIS at [ISOLDE](http://isolde.web.cern.ch/)\r\nMallard (Multi-Analog LossLess Acquisition of Resonance Data) is data acquisition software for the Collinear Resonant Ionization Spectroscopy experiment at CERN.\r\n\r\n### Contents\r\n- [Online Resources] (#resources)\r\n- [Introduction] (#introduction)\r\n- [Installation](#installation)\r\n- [Use](#use)\r\n- [Development](#development)\r\n- [Troubleshooting] (#troubleshooting)\r\n- [Authors](#authors)\r\n\r\n### Resources\r\nGithub Repository: https://github.com/kieranrcampbell/mallard\r\n\r\nDocumentation: http://kieranrcampbell.github.io/mallard/\r\n\r\nSourceforge page: https://sourceforge.net/projects/mallardforcris/\r\n\r\n### Introduction\r\n#### Etymology\r\nTwo things frequently occur at CERN: everything is an acronym (CERN, LHC, ATLAS, ALICE,\r\nISOLDE, CRIS, ...), and the DAQ/duck joke is made (a yellow rubber duck sits on the data acquisition\r\ndesk in the ATLAS control room). The obvious challenge then for any self respecting summer student is\r\nto combine both of these, and so came Mallard: Multi Analog LossLess Acquistion of Resonance Data\r\n\r\n####Purpose\r\nMallard is designed for efficient data acquisition and experimental control on the CRIS experiment at ISOLDE at CERN. The software interfaces a National Instruments USB-6211 card that connects to the lasers, counters and trigger. The experiment requires the software  to scan across a range of voltages set on an analogue output, and at each voltage measure counts (from the MCP) and an analogue input (relative intensity of the laser). The user selects the voltage range across which to scan, how many volts should be set in a given interval, and how many scans across the full voltage range should be performed. The timing of the voltage change comes from an external trigger that is also connected to the scanning laser.\r\n\r\nDuring the data acquisition the software continuously graphs the current count rate and analogue input voltage measured, as well as the average so far in order to provide the user with an idea of whether the measurements are drifting from normal. The raw data of counts and analogue input measurements is collected and saved to disk, as well as an integrated file showing the measurements at each voltage averaged over a number of scans.\r\n\r\n### Installation\r\nMallard is written in python and so requires a python distribution such as [Anaconda](https://store.continuum.io/).\r\n#### Dependencies\r\nMallard has the following dependencies:\r\n* [wxPython](http://www.wxpython.org/)\r\n* [SciPy](http://www.scipy.org/) (on windows we use [Anaconda](https://store.continuum.io/) )\r\n* [PyDAQmx](http://pythonhosted.org/PyDAQmx/)\r\n\r\nInstalling SciPy on Windows can be tedious, so use [Anaconda](https://store.continuum.io/) which comes with it pre-installed. Don't install wxPython using `easy_install` or `pip` as these install some bizarre empty package. Instead, download the windows installer directly from their website (see above).\r\n\r\n#### NIDAQmx\r\n[NIDAQmx](http://www.ni.com/dataacquisition/nidaqmx) from National Instruments provides the base set of drivers to interface the card. The full set of functionality is only available on Windows. At time of writing the latest version was 9.7 which can be downloaded from http://joule.ni.com/nidu/cds/view/p/id/3811/lang/en. NIDAQmx installs a header file containing all the C library function definitions. The location of this file must be noted and an installation file in PyDAQmx modified accordingly (see PyDAQmx documentation for details).\r\n\r\n#### Mallard\r\n##### From source\r\nThe source code can be downloaded (as zip or tar.gz) from the [github repository](https://github.com/kieranrcampbell/mallard). Extract it to a convenient folder then, from the top level `mallard` directory it can be installed by `python setup.py install`. Then mallard can be launched in the usual way, or if you prefer to use it within a python script itself it can be called using `import mallard` etc.\r\n##### Windows installer\r\nA windows installer for the python package can be downloaded from the [sourceforge page] (https://sourceforge.net/projects/mallardforcris/) which will install it as a python package.\r\n\r\n##### System requirements\r\nDue to the availability of NI-DAQmx Mallard only runs on windows. Despite all data being held in RAM, during system tests it was found that 500 scans with 50 intervals per scan only takes up about 150MB, so this is certainly not a limiting factor.\r\n\r\n### Use\r\n#### Basic Capture\r\nTo begin Mallard, navigate to the root mallard folder, and start by\r\n```\r\npython -m mallard.main\r\n```\r\nDue to a multiprocessing bug under python on windows we can't have the usual __main__.py folder to begin the module as `python mallard`.\r\n\r\nEach acquisition session of data corresponding to a particular set of settings is known as a capture. Each capture is represented by a tab in the GUI, and a new capture can be opened by File -> New Capture. Captures can be saved (see below), but cannot be reloaded into Mallard as there is currently no data analysis functionality. However, the settings for a new capture can be loaded from an old capture by File -> Load Capture then selecting the capture you wish to open.\r\n\r\nThe capture begins by pressing 'Start Capture', and can be stopped by selecting Capture -> Kill Capture. The current voltage and MCP count is displayed on the screen, as well as the scan average superimposed on the graph. The graph can be saved at any time using the Matplotlib functionality on screen. \r\n\r\nThe graph style can be changed at any time by going to File -> Preferences. The graph style can be set separately for the count graph and for the voltage graph. There are three different types:\r\n\r\n* Step (histogram): Essentially bins the data exactly like a histogram\r\n* Line: joins consecutive data points using lines\r\n* Points: Each data point is represented by a separate point. For the count graph this has error bars, which are given by root(N) for N counts.\r\n\r\nIn these preferences you can also set the style of the 'mean'. Selecting 'normalised' graphs each count divided by the number of scans, whereas 'cumulative' gives the sum of all counts across all scans. \r\n\r\nPlots can be saved using the controls on the plot itself. To move the plot around, select the 'Pan' symbol and drag with the left mouse click. To zoom in and out, both horizontally and vertically, select the 'Pan' symbol and drag with the right mouse button.\r\n\r\n##### Key Concepts\r\n- **Voltage minimum**: The voltage from which the laser starts scanning\r\n- **Voltage maximum**: The voltage to which the laser will scan\r\n- **Intervals per scan**: The number of intervals to scan in the voltage range\r\n- **Scans**: The number of full scans to do (from minimum to maximum across the range)\r\n- **Clock cycles per interval**: The number of onboard clock cycles to wait per scan (known as the 'rate' in NI terminology, 100 is a good number)\r\n- **Analog input**: Analog input channel (default /Dev1/ai2)\r\n- **Counter input**: Input channel for counting events. This is a 'virtual' channel, which requires looking at the NI handbook, but Dev1/ctr1 corresponds to Dev1/PFI1 on the 6211\r\n- **Analog output**: Analog output channel (default /Dev1/ao0)\r\n- **Clock input**: Input channel for the pseudo-trigger clock\r\n\r\n##### File Output\r\nWhen mallard runs it creates two datasets: every count measurement at every interval across every scan, and likewise for the analog input readings. These are then averaged over the scans to give a third 'integrated' dataset. As such, mallard outputs 3 data files. If the capture name is 'mycapture' then these files are:\r\n- **mycapture.integrated.csv**: contains the integrated (final) dataset across all scans\r\n- **mycapture.raw.counts.csv**: contains the raw count data for all intervals and scans\r\n- **mycapture.raw.ai.csv**: contains the raw analog input information for all intervals and scans\r\n\r\nEach of these files is in comma separated value format and contains a header, denoted by '#' at the beginning of each line, containing the settings listed in key concepts above. As such, any file can be used to recover capture settings for a new capture.\r\n\r\nMallard doesn't yet have any in built analysis, but with the data in this format it should be easy enough. The data can be opened directly in excel, or using numpy in python as follows:\r\n```python\r\nimport numpy as np\r\ndata = np.loadtxt('mycapture.integrated.csv')\r\nvoltage_intervals = data.T[0] # need to transpose matrix\r\ncounts = data.T[1]\r\nai_readings = data.T[2]\r\n```\r\n\r\nand `voltage`, `counts` and `ai_readings` can be analysed using any of the standard tools in SciPy.\r\n\r\n### Development\r\n\r\nMallard is written in python and is under git source control.\r\n#### Package Layout\r\nThe mallard package is organised into several sub-packages:\r\n\r\n##### mallard.core\r\nThis provides base functionality for the package including data and file handling. `CaptureSession` represents an abstract (ie has no attached daq interface or gui), and manages calls for file management and data acquisition. `SessionSettings` represents the settings for a given capture session, including input, output and counter channels. `CaptureSession` holds the 'master' copy, though since everything in python is a pointer all copies (held by all `mallard.core` modules). However, after settings are changed some things must be recalculated (such as voltage intervals), so if a module uses `SessionSettings` it's not okay to assume changes elsewhere will be safely reflected in the current location. `DataManager` holds runtime data and has the `queue.get()` method to receive data from the interface. It also calculates the averages across scans, and calls the `GraphManager` (which provides the interface between `mallard.core` and the gui package). `FileManager` deals with file input and output. It can generate the header from `SessionSettings` and can read in and parse settings and filenames.\r\n\r\n##### mallard.daq\r\nThis contains only one module called `Acquire` that interfaces the USB-6211 card. If the card needs changed in future then only this module needs rewritten. It is the only module in the entire package that is just a function, as spawning processes that are class methods using the `multiprocessing` module is very difficult (maybe impossible?). All this module needs are the session settings (for channel names and rates) and a `multiprocessing.Queue` to report the data back to `DataManager`.\r\n\r\n##### mallard.gui\r\nThis provides the graphical user interface using wxPython. `MFrame` is the base `wx.Frame` used, which owns a `CaptureNotebook`. This `CaptureNotebook` holds `CapturePane`s, each of which corresponds to a `CaptureSession`. The `GraphManager` provides a link between the `DataManager` and the gui, updating the graph on screen with the data coming in. `SettingsDialog` simply displays a dialog that lets the user change all the different settings.\r\n\r\n##### mallard.test\r\nHolds all the obsolete and test scripts created along the way, in case they come in handy at a later point. May be changed to `old' in future. \r\n\r\n### Troubleshooting\r\n\r\n### Authors\r\nOriginally written by Kieran Campbell (@kieranrcampbell) as part of the CERN summer student program.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}